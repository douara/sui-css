@use "sass:map";
@use "sass:math";

@import "./variables";
@import "./breakpoints";

.sui-col {
	min-width: 0;
	max-width: 100%;
	display: block;
	margin: 0 0 map.get($spacing, sm);

	// Set sizing.
	.sui-row--inline & {
		& {
			width: auto;
			flex: 1;
		}

		@for $size from 1 through 12 {
			$value: math.div(($size * 100), $grid);
			$width: #{$value + "%"};

			&--#{$size} {
				width: $width;
				flex: 0 0 auto;
			}
		}
	}

	@each $bp-label, $bp-value in $breakpoints {
		.sui-row-#{$bp-label}--inline & {
			& {
				@include media(min-width, $bp-label) {
					width: auto;
					flex: 1;
				}
			}

			@for $size from 1 through 12 {
				$value: math.div(($size * 100), $grid);
				$width: #{$value + "%"};

				&--#{$size} {
					@include media(min-width, $bp-label) {
						width: $width;
						flex: 0 0 auto;
					}
				}
			}
		}

		.sui-row-#{$bp-label}--stacked & {
			& {
				@include media(min-width, $bp-label) {
					width: 100%;
				}
			}
		}
	}

	// Set spacing.
	.sui-row--inline & {
		margin: 0;
		padding: 0 math.div(map.get($spacing, sm), 2);
	}

	@each $bp-label, $bp-value in $breakpoints {
		.sui-row-#{$bp-label}--inline & {
			@include media(min-width, $bp-label) {
				margin: 0;
				padding: 0 math.div(map.get($spacing, $bp-label), 2);
			}
		}

		.sui-row-#{$bp-label}--stacked & {
			@include media(min-width, $bp-label) {
				margin: 0 0 map.get($spacing, $bp-label);
				padding: 0;
			}
		}
	}

	&:last-child {
		margin-bottom: 0;
	}
}
