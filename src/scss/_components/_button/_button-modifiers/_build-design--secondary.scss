@use "sass:map";

@use "../../../_utils/tokens" as *;
@use "../../../_utils/mixins" as *;

@use "../_button-utils/colors" as *;
@use "../_button-utils/variables" as *;

/// Secondary Button Builder
///
/// @type block
/// @author WPMU DEV
///
/// @param {String} $block - Main block name
@mixin build-secondary-design($block) {
	// DIR: Left to right.
	// THEME: Light.
	@include sui-class($rtl: false, $theme: light) {
		// Block wrapper.
		@include block($block) {
			// Element wrapper.
			@include modifier(secondary) {
				outline-width: map.get($sui-button-border, md, width);
				outline-style: map.get($sui-button-border, md, style);
				outline-offset: -#{map.get($sui-button-border, md, width)};

				&:focus {
					outline-width: map.get($sui-button-border, lg, width);
				}

				@each $color, $states in $sui-button-secondary {
					@if $color == common {
						background: map.get($sui-button-secondary, $color, default, background);
					}
					@else {
						&.sui-#{$block}--#{$color} {
							// State: Default
							@if map.get($sui-button-secondary, $color, default, border-color) {
								outline-color: map.get($sui-button-secondary, $color, default, border-color);
							}
							@if map.get($sui-button-secondary, $color, default, color) {
								color: map.get($sui-button-secondary, $color, default, color);
							}

							// State: Hover
							@if map.get($sui-button-secondary, $color, variant) {
								&:hover {
									background: map.get($sui-button-secondary, $color, variant, background);
								}
							}

							// State: Focus
							&:focus {
								background: map.get($sui-button-secondary, $color, default, background);
							}
						}
					}
				}

				// State: Disabled
				&.sui-#{$block}--disabled {
					outline-color: map.get($sui-button-disabled, background);
					background: map.get($sui-button-disabled, background);
					color: map.get($sui-button-disabled, color);
				}
			}
		}
	}
}
