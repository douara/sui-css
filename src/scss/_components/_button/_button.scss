@use "sass:map";
@use "sass:color";

@use "../../_utils/tokens" as *;
@use "../../_utils/functions" as *;
@use "../../_utils/bem" as *;
@use "../../_utils/mixins" as *;

$themes: primary, secondary, tertiary;

$colors: (
	blue: $color-primary-50,
	black: $color-extended-neutral-10,
	red: $color-extended-error-50,
	navy: $color-primary-30,
	white: $color-extended-neutral-100
);

@include sui-class($rtl: false, $theme: null) {
	@include block(button) {
		cursor: pointer;
		min-width: $button-container-size-md;
		max-width: 100%;
		display: inline-flex;
		flex-flow: row wrap;
		align-items: center;
		justify-content: center;
		margin: $button-container-margin-vertical $button-container-margin-horizontal;
		padding: $button-container-padding-vertical $button-container-padding-horizontal;
		border-width: $button-container-border-width;
		border-style: $button-container-border-style;
		border-radius: $button-container-border-radius;
		outline: none;
		background-image: none;
		box-shadow: none;
		font-weight: $button-label-font-weight;
		font-size: $button-label-font-size-md;
		line-height: $button-label-font-height-md;
		letter-spacing: $button-label-font-spacing-md;
		text-decoration: none;
		transition: 0.1s ease;

		&:first-child {
			margin-left: 0;
		}

		&:last-child {
			margin-right: 0;
		}

		@include element(label) {
			display: block;
			padding: $button-label-padding-vertical $button-label-padding-horizontal;
		}

		@include element(icon) {
			display: block;
			padding: $button-icon-padding-vertical-md $button-icon-padding-horizontal-md;
		}

		@include element(spinner) {
			display: block;
		}

		@include modifier(sm) {
			min-width: $button-container-size-sm;
			font-size: $button-label-font-size-sm;
			line-height: $button-label-font-height-sm;
			letter-spacing: $button-label-font-spacing-sm;

			@include modifies-element(icon) {
				padding: $button-icon-padding-vertical-sm $button-icon-padding-horizontal-sm;
			}
		}

		@each $theme in $themes {
			@each $name, $value in $colors {
				$modifier-name: #{$theme + '-' + $name};

				@include modifier($modifier-name) {
					@if $theme == tertiary {
						border-color: transparent;
						background: transparent;
						color: $value;

						&.sui-button--hover {
							border-color: if($name == white, $value, tint($value, 90%));
							background: if($name == white, $value, tint($value, 90%));
							@if $name == white {
								color: $color-extended-neutral-10;
							}
						}

						&.sui-button--focus {
							border-color: $value;
							outline: 1px solid $value;
							background: transparent;
							@if $name == white {
								color: $value;
							}
						}
					}
					@else if $theme == secondary {
						border-color: $value;
						background: transparent;
						color: $value;

						&.sui-button--hover {
							background: if($name == white, $value, tint($value, 90%));
							@if $name == white {
								color: $color-extended-neutral-10;
							}
						}

						&.sui-button--focus {
							outline-width: if($name == white, 2px, 1px);
							outline-style: solid;
							outline-color: $value;
							outline-offset: if($name == white, 2px, 0);
							background: if($name == white, $value, tint($value, 90%));
							@if $name == white {
								color: $color-extended-neutral-10;
							}
						}
					}
					@else {
						border-color: $value;
						background: $value;
						color: if($name == white, $color-extended-neutral-10, $color-extended-neutral-100);

						&.sui-button--hover {
							border-color: if($name == white, shade($value, 5%), shade($value, 40%));
							background: if($name == white, shade($value, 5%), shade($value, 40%));
						}

						&.sui-button--focus {
							border-color: $value;
							outline: 2px solid $value;
							outline-offset: 2px;
							background: $value;
						}
					}
				}
			}
		}

		@include modifier(loading) {
			pointer-events: none;
		}

		@include modifier(disabled) {
			cursor: default;
			pointer-events: none;
			border-color: $color-extended-neutral-80;
			background: $color-extended-neutral-80;
			color: $color-extended-neutral-70;
		}

		// @include modifier(test) {
		// 	__toString__: inspect($bem-current-context);
		// 	__length__: length($bem-current-context);
		// 	__keys__: map-keys($bem-current-context);

		// 	@if map-has-key($bem-current-context, modifier) {
		// 		content: 'true';
		// 	}

		// 	__properties__ {
		// 		@each $key, $value in $bem-current-context {
		// 			#{$key}: inspect($value);
		// 		}
		// 	}
		// }
	}
}

// Modifiers Hierarchy
// 1. State: Default, Hover, Focus, Selected, Loading, Disabled
// 2. Design: Solid, Solid Alt, Outlined, Text
// 3. Hue:
//   2.1. Hue: Gray, Blue, Black, Red, Navy, White
//   2.2. Tint: True, False – For lighter colors
//   2.3. Shade: True, False – For darker colors
//
// Example(s):
// .sui-button--solid .sui-button--blue
// .sui-button--solid .sui-button--blue .sui-button--light
// .sui-button--solid .sui-button--blue .sui-button--dark
//
