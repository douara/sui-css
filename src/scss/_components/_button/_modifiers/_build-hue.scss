@use "sass:map";
@use "sass:color";

@use "../../../_utils/mixins" as *;
@use "../_utils/maps" as *;

@mixin build-hue($block-name) {
	@include sui-class($rtl: false, $theme: null) {
		@include block($block-name) {
			outline-color: #737373;
			background-color: #F8F8F8;
			color: #737373;

			@include modifier(hover) {
				background-color: #F2F2F2;
				color: #333333;
			}

			@include modifier(focus) {
				background-color: #F8F8F8;
				color: #737373;
			}

			@include modifier(loading) {
				pointer-events: none;
			}

			@each $color, $state-map in $hue {
				@include modifier($color) {
					@each $state, $props in $state-map {
						@if $state == default {
							@if ( map.get($hue, $color, $state, outline) ) {
								outline-color: map.get($hue, $color, $state, outline);
							}
							@if ( map.get($hue, $color, $state, background) ) {
								background-color: map.get($hue, $color, $state, background);
							}
							@if ( map.get($hue, $color, $state, color) ) {
								color: map.get($hue, $color, $state, color);
							}
						}
						@else {
							&.sui-button {
								@include modifier($state) {
									@if ( map.get($hue, $color, $state, outline) ) {
										outline-color: map.get($hue, $color, $state, outline);
									}
									@if ( map.get($hue, $color, $state, background) ) {
										background-color: map.get($hue, $color, $state, background);
									}
									@if ( map.get($hue, $color, $state, color) ) {
										color: map.get($hue, $color, $state, color);
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
