@use "sass:map";

@use "../../../_utils/mixins" as *;
@use "../_tag-utils/variables" as *;

/// Build Tag
/// This function creates styles for the element
/// main wrapper.
/// @type block
/// @author WPMU DEV
///
/// @param {String} $block - Main block name
@mixin build-tag($block) {
	// DIR: Left to right.
	// THEME: None.
	@include sui-class($rtl: false, $theme: null) {
		// Block wrapper.
		@include block($block) {
			height: auto;
			cursor: default;
			display: inline-block;
			margin: 0 3px;
			text-align: center;
			text-decoration: none;

			@if map.has-key($sui-tag-size, md, height) {
				min-height: map.get($sui-tag-size, md, height);
			}

			@if map.has-key($sui-tag-spacing, md, vertical) {
				padding-top: map.get($sui-tag-spacing, md, vertical);
				padding-bottom: map.get($sui-tag-spacing, md, vertical);
			}

			@if map.has-key($sui-tag-spacing, md, horizontal) {
				padding-left: map.get($sui-tag-spacing, md, horizontal);
				padding-right: map.get($sui-tag-spacing, md, horizontal);
			}

			@if map.has-key($sui-tag-spacing, sm, vertical) {
				@include modifier(sm) {
					padding-top: map.get($sui-tag-spacing, sm, vertical);
					padding-bottom: map.get($sui-tag-spacing, sm, vertical);
				}
			}

			@if map.has-key($sui-tag-spacing, sm, horizontal) {
				@include modifier(sm) {
					padding-left: map.get($sui-tag-spacing, sm, horizontal);
					padding-right: map.get($sui-tag-spacing, sm, horizontal);
				}
			}

			@if map.has-key($sui-tag-border, width) {
				border: map.get($sui-tag-border, width) solid transparent;
			}

			@if map.has-key($sui-tag-border, radius) {
				border-radius: map.get($sui-tag-border, radius);
			}

			@if map.has-key($sui-tag-size, sm) {
				@include modifier(sm) {
					min-height: map.get($sui-tag-size, sm, height);
				}
			}

			@include modifier(multiline) {
				max-width: 100px;
			}

			@include modifier(truncated) {
				max-width: 100px;
				span {
					max-width: 100%;
					overflow: hidden;
					display: block;
					text-overflow: ellipsis;
					white-space: nowrap;
				}
			}

			@include modifier(uppercase) {
				text-transform: uppercase;
			}

			@include element(button) {
				cursor: pointer;
			}

			@include element(link) {
				cursor: pointer;
			}

			&:first-child {
				margin-left: 0;
			}

			&:last-child {
				margin-right: 0;
			}
		}
	}
}
