@use "sass:map";

@use "../../../_utils/mixins" as *;
@use "../_input-utils/variables" as *;

@use "../_input-utils/colors" as *;

/// Build Error Message
/// This function creates styles for the button
/// label element.
/// @type block
/// @author WPMU DEV
///
/// @param {String} $block - Main block name
@mixin build-error-message($block) {
	// DIR: Left to right.
	// THEME: None.
	@include sui-class($rtl: false, $theme: null) {
		// Block wrapper.
		@include block($block) {
			.sui-#{$block}__error-message {
				display: block;
				@if map.has-key($sui-input-font, sm, size) {
					font-size: map.get($sui-input-font, sm, size);
				}
				@if map.has-key($sui-input-font, sm, height) {
					line-height: map.get($sui-input-font, sm, height);
				}
				@if map.has-key($sui-input-font, sm, spacing) {
					letter-spacing: map.get($sui-input-font, sm, spacing);
				}
				@if map.has-key($sui-input-color, red, default, color) {
					color: map.get($sui-input-color, red, default, color);
				}
				margin-top: 4px;
			}

			&.sui-#{$block}--error {
				.sui-#{$block}__field {
					@if map.has-key($sui-input-color, red, default, color) {
						border-color: map.get(
							$sui-input-color,
							red,
							default,
							color
						);
					}

					+ .sui-#{$block}__label {
						@if map.has-key($sui-input-color, grey, dark, color) {
							color: map.get($sui-input-color, grey, dark, color);
						}
					}

					&:focus {
						@if map.has-key($sui-input-border, md, width) {
							border-width: map.get($sui-input-border, md, width);
						}
					}
				}
			}

			@include modifier(sm) {
				.sui-#{$block}__error-message {
					@if map.has-key($sui-input-font, xs, size) {
						font-size: map.get($sui-input-font, xs, size);
					}
					@if map.has-key($sui-input-font, xs, height) {
						line-height: map.get($sui-input-font, xs, height);
					}
				}
			}
		}
	}
}
