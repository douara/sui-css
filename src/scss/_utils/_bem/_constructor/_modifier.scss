@use "sass:list";
@use "sass:selector";

@use "../defaults" as *;
@use "../logger" as *;
@use "../error-checks" as *;

/// Initializes a new modifier for the current block or element(s)
/// @private
/// @param {String | Arglist} $modifiers - List of new modifier names
/// @returns The final selector for the new modifier(s)
@function build-modifier($modifiers...) {
	// Log new modifier(s)
	$new-modifier: _bem-log-modifier($modifiers...);

	// Error checks
	$inside-check: _should-be-called-within("block");
	$outside-check: _should-not-be-called-within("modifier");

	// Return false in case error throwing is disabled
	@if $inside-check == false or $outside-check == false {
		@return false;
	}

	$selector: ();

	@each $modifier in $modifiers {
		// $new-selector: ();

		// @each $sel in & {
		// 	$modified-selector: #{$sel}#{$bem-modifier-separator}#{$modifier};
		// 	$new-selector: list.append($new-selector, $modified-selector, comma);
		// }

		$sel: #{'&'} + $bem-modifier-separator + $modifier;
		$selector: list.append($selector, $sel, comma);
	}

	$set-current: set-current-context("modifier", $modifiers, $selector);

	@return $selector;
}

/// Creates new modifier(s)
/// @param {String | Arglist} $modifiers  - Name of the new modifier(s)
@mixin modifier($modifiers...) {
	// Write modifier selector
	// Usually would be placed @at-root but since we want to limit it inside
	// the `sui-wrapper` element then we call the modifier name only
	#{build-modifier($modifiers...)} {
		@content;
	}

	$unset-current: unset-current-context("modifier");
}
